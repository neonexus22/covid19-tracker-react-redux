{"version":3,"sources":["components/Cards/Cards.module.css","redux/covid/covid.types.js","redux/covid/covid.reducer.js","redux/root-reducer.js","redux/store.js","redux/covid/covid.selector.js","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.jsx","redux/covid/covid.actions.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","CovidActionTypes","INITIAL_STATE","data","country","covidReducer","state","action","type","payload","combineReducers","covid","middlewares","logger","store","createStore","rootReducer","applyMiddleware","selectCovidState","selectCovidData","createSelector","covidData","selectCountry","mapStateToProps","createStructuredSelector","connect","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","url","fetchData","a","changableUrl","axios","get","console","log","fetchDailyData","map","dailyData","total","reportDate","fetchCountries","countries","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","countryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","name","App","handleCountryChange","props","setDataByCountry","setCountry","fetchedData","this","image","src","coronaImage","alt","React","Component","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11512e23.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","export const CovidActionTypes = {\n  SET_DATA_BY_COUNTRY: \"SET_DATA_BY_COUNTRY\",\n  SET_COUNTRY: \"SET_COUNTRY\",\n};\n","import { CovidActionTypes } from \"./covid.types\";\n\nconst INITIAL_STATE = {\n  data: {},\n  country: \"\",\n};\n\nconst covidReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CovidActionTypes.SET_DATA_BY_COUNTRY:\n      return {\n        ...state,\n        data: action.payload,\n      };\n    case CovidActionTypes.SET_COUNTRY:\n      return {\n        ...state,\n        country: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default covidReducer;\n","import { combineReducers } from \"redux\";\n\nimport covidReducer from \"./covid/covid.reducer\";\n\nexport default combineReducers({\n  covid: covidReducer,\n});\n","import { createStore, applyMiddleware } from \"redux\";\n\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"./root-reducer\";\n\nconst middlewares = [logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;\n","import { createSelector } from \"reselect\";\n\nconst selectCovidState = (state) => state.covid;\n\nexport const selectCovidData = createSelector(\n  [selectCovidState],\n  (covidData) => covidData.data\n);\n\nexport const selectCountry = createSelector(\n  [selectCovidState],\n  (covidData) => covidData.country\n);\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectCovidData } from \"../../redux/covid/covid.selector\";\n\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\n\nimport cx from \"classnames\";\nimport styles from \"./Cards.module.css\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed?.value || 0}\n                duration={2.5}\n                seperator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered?.value || 0}\n                duration={2.5}\n                seperator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths?.value || 0}\n                duration={2.5}\n                seperator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of deaths caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  data: selectCovidData,\n});\n\nexport default connect(mapStateToProps)(Cards);\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changableUrl = url;\n  if (country) {\n    changableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changableUrl);\n\n    return {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n    };\n  } catch (error) {\n    console.log(\"error-01\", error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n    return data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      reportDate: dailyData.reportDate,\n    }));\n  } catch (error) {\n    console.log(\"daily data\", error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n    return countries;\n  } catch (error) {\n    console.log(\"countries\", error);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport {\n  selectCovidData,\n  selectCountry,\n} from \"../../redux/covid/covid.selector\";\n\nimport { fetchDailyData } from \"../../api\";\n\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ reportDate }) => reportDate),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  data: selectCovidData,\n  country: selectCountry,\n});\n\nexport default connect(mapStateToProps)(Chart);\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\nimport styles from \"./CountryPicker.module.css\";\nimport { fetchCountries } from \"../../api\";\n\nconst CountryPicker = ({ countryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetchedCountries(await fetchCountries());\n    };\n    fetchAPI();\n  }, [setFetchedCountries]);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect\n        defaultValue=\"\"\n        onChange={(e) => countryChange(e.target.value)}\n      >\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => (\n          <option key={i} value={country.name}>\n            {country.name}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { setDataByCountry, setCountry } from \"./redux/covid/covid.actions\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\n\nimport { fetchData } from \"./api\";\nimport coronaImage from \"./images/image.png\";\n\nclass App extends React.Component {\n  async componentDidMount() {\n    const { setDataByCountry } = this.props;\n    const fetchedData = await fetchData();\n    setDataByCountry(fetchedData);\n  }\n\n  handleCountryChange = async (country) => {\n    const { setDataByCountry, setCountry } = this.props;\n    const fetchedData = await fetchData(country);\n    setDataByCountry(fetchedData);\n    setCountry(country);\n  };\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt=\"covid19\" />\n        <Cards />\n        <CountryPicker countryChange={this.handleCountryChange} />\n        <Chart />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setDataByCountry: (data) => dispatch(setDataByCountry(data)),\n  setCountry: (country) => dispatch(setCountry(country)),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { CovidActionTypes } from \"./covid.types\";\n\nexport const setDataByCountry = (data) => ({\n  type: CovidActionTypes.SET_DATA_BY_COUNTRY,\n  payload: data,\n});\n\nexport const setCountry = (country) => ({\n  type: CovidActionTypes.SET_COUNTRY,\n  payload: country,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux/store\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}